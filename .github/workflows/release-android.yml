name: android-release

on:
  push:
    tags:
      - "v*"

concurrency:
  group: android-release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-24.04
    env:
      FAIL_IF_NO_KEYSTORE: "false"
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 解析版本号并更新
        run: |
          VERSION="${GITHUB_REF_NAME}"
          VERSION="${VERSION#v}"
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" src-tauri/tauri.conf.json
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "✅ 已设定版本号: $VERSION"

      - name: 检测并准备签名密钥（只使用 Secrets.KEYSTORE）
        id: keystore
        run: |
          set -e
          KS="${{ secrets.KEYSTORE }}"
          if [ -z "$KS" ]; then
            echo "⚠️ 未找到签名密钥（KEYSTORE），将标记跳过签名相关逻辑。"
            echo "SKIP_SIGNING=true" >> $GITHUB_ENV
            if [ "$FAIL_IF_NO_KEYSTORE" = "true" ]; then
              echo "❌ 已配置必须存在密钥，终止。"
              exit 1
            fi
            exit 0
          fi
          mkdir -p src-tauri
          echo "$KS" | base64 -d > src-tauri/doki-release-key.keystore 2>/dev/null || {
            echo "⚠️ base64 解码失败，尝试直接写入。";
            printf "%s" "$KS" > src-tauri/doki-release-key.keystore
          }
          if [ -s src-tauri/doki-release-key.keystore ]; then
            echo "✅ 已生成 keystore 文件"
            echo "SKIP_SIGNING=false" >> $GITHUB_ENV
            echo "ANDROID_KEYSTORE_FILE=$PWD/src-tauri/doki-release-key.keystore" >> $GITHUB_ENV
            echo "::add-mask::$KS"
            if command -v sha256sum >/dev/null 2>&1; then
              FPRINT=$(sha256sum src-tauri/doki-release-key.keystore | cut -d' ' -f1)
              echo "签名文件 SHA256: $FPRINT"
            fi
          else
            echo "❌ 生成 keystore 失败，继续无签名构建"
            echo "SKIP_SIGNING=true" >> $GITHUB_ENV
          fi

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: 安装 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: pnpm

      - name: 缓存 pnpm 仓库
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装前端依赖
        run: pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: 安装 Rust stable 及 Android 目标
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android

      - name: 缓存 Rust
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
          cache-all-crates: true

      - name: 缓存系统依赖
        uses: actions/cache@v4
        id: system-cache
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: 安装系统依赖
        if: steps.system-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: 缓存 Gradle 包和分发文件
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
            src-tauri/gen/android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties', '**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 设置 Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: 缓存 Android SDK 组件
        uses: actions/cache@v4
        id: android-cache
        with:
          path: |
            /usr/local/lib/android/sdk/platforms/android-34
            /usr/local/lib/android/sdk/build-tools/34.0.0
            /usr/local/lib/android/sdk/ndk/26.1.10909125
            /usr/local/lib/android/sdk/platform-tools
            /usr/local/lib/android/sdk/cmdline-tools/latest
            ~/.android/repositories.cfg
          key: ${{ runner.os }}-android-sdk-v2-34.0.0-ndk26.1
          restore-keys: |
            ${{ runner.os }}-android-sdk-v2-34.0.0
            ${{ runner.os }}-android-sdk-v2

      - name: 设置 Android SDK
        uses: android-actions/setup-android@v3

      - name: 安装 Android SDK 组件
        if: steps.android-cache.outputs.cache-hit != 'true'
        run: |
          echo "缓存未命中，安装 Android SDK 组件..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            "ndk;26.1.10909125" \
            "cmdline-tools;latest"

      - name: 设置 Android 环境变量
        run: |
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_HOME/ndk/26.1.10909125" >> $GITHUB_ENV

      - name: 缓存前端构建
        uses: actions/cache@v4
        id: frontend-cache
        with:
          path: |
            dist
            node_modules/.cache
          key: ${{ runner.os }}-frontend-${{ hashFiles('package.json', 'pnpm-lock.yaml', 'vite.config.*', 'tsconfig.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: 构建前端
        run: pnpm build

      - name: 缓存 Tauri Android 生成
        uses: actions/cache@v4
        id: tauri-android-cache
        with:
          path: src-tauri/gen/android
          key: ${{ runner.os }}-tauri-android-${{ hashFiles('src-tauri/tauri.conf.json', 'src-tauri/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-tauri-android-

      - name: 初始化 Tauri Android 项目
        if: steps.tauri-android-cache.outputs.cache-hit != 'true'
        run: |
          if [ ! -d "src-tauri/gen/android" ]; then
            pnpm tauri android init
          fi

      - name: 安装 Android Rust 目标 (arm64-v8a)
        run: |
          rustup target add aarch64-linux-android

      - name: 构建 Android APK
        run: |
          export GRADLE_OPTS="-Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.jvmargs=-Xmx2g"
          pnpm gen

      - name: 列出生成的 APK 文件
        run: |
          echo "查找 APK..."
          find . -name "*.apk" -type f -exec ls -lh {} \;
          APK_COUNT=$(find . -name "*.apk" -type f | wc -l)
          echo "总数: $APK_COUNT"

      - name: 生成发布说明
        run: |
          {
            echo "Version: ${VERSION}";
            echo "Tag: ${GITHUB_REF_NAME}";
            echo "Commit: ${GITHUB_SHA}";
            echo "Build ID: ${GITHUB_RUN_ID}";
          } > release_body.md

      - name: 创建 Android 发布并上传 APK
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: APP ${{ env.VERSION || github.ref_name }}
          draft: false
          prerelease: false
          body_path: release_body.md
          files: |
            **/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
